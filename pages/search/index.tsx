import FreelanceItem from "@/components/FreelanceItem/FreelanceItem";
import Header from "@/components/Header/Header";
import Loading from "@/components/Loading/Loading";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import SearchBox from "../../components/SearchBox/SearchBox";
import axios from "axios";
import { TbError404 } from "react-icons/tb";
import { RiSignalWifiErrorLine } from "react-icons/ri";
import { useQuery } from "react-query";
export interface ListItemProps {
  projectTitle: string;
  projectDescription: string;
  projectLink: string;
  projectTags: { title: string; link: string }[];
  projectBudget: string;
  name: string;
}

function Search() {
  const router = useRouter();
  const { keyword, sort } = router.query;
  const [sortValue, setSort] = useState<string>("");
  const getQueryParams = () => {
    const params = Object.keys(router.query);
    let queries = "";
    for (const param of params) {
      if (!queries.length) {
        queries += `${param}=${router.query[param]}`;
      } else {
        queries += `&${param}=${router.query[param]}`;
      }
    }

    return queries;
  };

  interface SortMethodsType {
    [key: string]: (list: ListItemProps[]) => ListItemProps[];
  }

  const sortMethods: SortMethodsType = {
    highestPrice: (list: any[]) => {
      return list.sort((a: any, b: any) => {
        if (Number(a.projectBudget) > Number(b.projectBudget)) {
          return -1;
        }
        if (Number(a.projectBudget) < Number(b.projectBudget)) {
          return 1;
        }
        return 0;
      });
    },
    lowestPrice: (list: any[]) => {
      return list.sort((a: any, b: any) => {
        if (Number(a.projectBudget) > Number(b.projectBudget)) {
          return 1;
        }
        if (Number(a.projectBudget) < Number(b.projectBudget)) {
          return -1;
        }
        return 0;
      });
    },
  };
  const {
    data: list,
    isError,
    isLoading,
  } = useQuery(["list", keyword], async () => {
    return await (
      await axios.get(`/api/search?${getQueryParams()}`)
    ).data;
  });

  const sortMethod = sort ? String(sort) : "highestPrice";

  const handleChangeSortValue = (e: any) => {
    const sortedData = sortMethods[e.target.value](list);
    setSort(e.target.value);
    router.query.sort = e.target.value;
    router.push(router);
    return sortedData;
  };

  const renderLoading = () => {
    return isLoading ? (
      <>
        <Loading />
        <Loading />
        <Loading />
      </>
    ) : (
      <></>
    );
  };

  const renderList = () => {
    if (!isLoading && !isError && list.length) {
      return sortMethods[sortMethod](list).map((item: any, index: number) => {
        return <FreelanceItem item={item} key={index} />;
      });
    } else if (!isLoading && isError) {
      return (
        <div className="flex flex-col items-center justify-center w-full h-96">
          <span>
            <RiSignalWifiErrorLine fontSize={100} className="text-indigo-600" />
          </span>
          <h2 className="text-indigo-500 font-yekan-bold">
            خطایی پیش آمده است. لطفا اطلاع دهید
          </h2>
        </div>
      );
    } else if (!isLoading && !isError && !list.length) {
      return (
        <div className="flex flex-col items-center justify-center w-full h-96">
          <span>
            <TbError404 fontSize={100} className="text-indigo-600" />
          </span>
          <h2 className="text-indigo-500 font-yekan-bold">
            نتونستیم چیزی که میخوای رو پیدا کنیم
          </h2>
        </div>
      );
    }

    return [];
  };
  return (
    <>
      <Head>
        <title>جستجوی موقعیت شغلی مربوط به {keyword}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`w-full flex flex-col items-center bg-gradient-to-r  bg-slate-100 dark:from-slate-900 dark:to-slate-700`}
      >
        <Header />
        <div className="relative flex flex-col items-center justify-center w-11/12 px-5 py-10 bg-white rounded-md md:p-10 md:w-2/3 h- dark:bg-slate-900">
          <div className="flex justify-between w-full">
            <h1 className="text-xl text-indigo-500 font-yekan-bold">
              جستجو کلیدواژه `{keyword}`
            </h1>
            <span className="text-sm font-yekan-regular text-slate-400">
              {list && list.length ? `${list.length} مورد پیدا شد` : ""}
            </span>
          </div>
          <div className="w-full py-5">
            <SearchBox />
            <br />
            <form action="">
              <div className="flex items-center w-full gap-3">
                <div className="w-2/6 md:w-1/6">
                  <span className="font-yekan-regular">مرتب سازی:</span>
                </div>
                <div className="w-4/6 md:w-1/6">
                  <select
                    value={sortValue}
                    disabled={isLoading}
                    onChange={handleChangeSortValue}
                    className="w-full h-10 rounded-md font-yekan-regular bg-slate-100 dark:bg-slate-700 dark:text-white md:w-96"
                  >
                    {sortValue === "highestPrice" ? (
                      <>
                        <option value="highestPrice">از بیشترین قیمت</option>
                        <option value="lowestPrice">از کمترین قیمت</option>
                      </>
                    ) : (
                      <>
                        <option value="lowestPrice">از کمترین قیمت</option>
                        <option value="highestPrice">از بیشترین قیمت</option>
                      </>
                    )}
                  </select>
                </div>
              </div>
            </form>
          </div>
          <div className="flex flex-col w-full py-5">
            {renderLoading()}
            {renderList()}
          </div>
        </div>
      </main>
    </>
  );
}

export default Search;
