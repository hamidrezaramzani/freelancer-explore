import FreelanceItem from "@/components/FreelanceItem/FreelanceItem";
import Header from "@/components/Header/Header";
import Loading from "@/components/Loading/Loading";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";

export interface ListItemProps {
  projectTitle: string;
  projectDescription: string;
  projectLink: string;
  projectTags: { title: string; link: string }[];
  projectBudget: string;
  name: string;
}

function Search() {
  const router = useRouter();
  const { keyword, sort } = router.query;
  const [list, setList] = useState<ListItemProps[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [sortValue, setSort] = useState<string>("");
  const getQueryParams = () => {
    const params = Object.keys(router.query);
    let queries = "";
    for (const param of params) {
      if (!queries.length) {
        queries += `${param}=${router.query[param]}`;
      } else {
        queries += `&${param}=${router.query[param]}`;
      }
    }

    return queries;
  };
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      const response = await fetch(
        `http://localhost:3000/api/search?${getQueryParams()}`
      );
      const json = await response.json();

      setList(json);
      setLoading(false);
    };

    setSort(sort ? String(sort) : "highestPrice");

    if (keyword) {
      fetchData();
    }
  }, [keyword, sort]);

  const handleChangeSortValue = (e: any) => {
    router.query.sort = e.target.value;
    router.push(router);
    setSort(e.target.value);
  };
  return (
    <>
      <Head>
        <title>موقعیت های شغلی فریلنسری</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`w-full flex flex-col items-center bg-gradient-to-r  bg-slate-100 dark:from-slate-900 dark:to-slate-700`}
      >
        <Header />
        <div className="relative w-5/6 md:w-2/3 bg-white h- dark:bg-slate-900 flex flex-col justify-center items-center p-10 rounded-md">
          <div className="w-full flex justify-between">
            <h1 className="text-xl font-yekan-bold text-indigo-500">
              جستجو کلیدواژه `{keyword}`
            </h1>
            <span className="text-sm font-yekan-regular text-slate-400">
              {list.length ? `${list.length} مورد پیدا شد` : ""}
            </span>
          </div>
          <div className="w-full py-5">
            <form action="">
              <select
                value={sortValue}
                onChange={handleChangeSortValue}
                className="h-10 font-yekan-regular w-96 rounded-md"
              >
                {sortValue === "highestPrice" ? (
                  <>
                    <option value="highestPrice">از بیشترین قیمت</option>
                    <option value="lowestPrice">از کمترین قیمت</option>
                  </>
                ) : (
                  <>
                    <option value="lowestPrice">از کمترین قیمت</option>
                    <option value="highestPrice">از بیشترین قیمت</option>
                  </>
                )}
              </select>
            </form>
          </div>
          <div className="w-full flex flex-col py-5">
            {loading ? (
              <>
                <Loading />
                <Loading />
                <Loading />
              </>
            ) : (
              <></>
            )}
            {list.length
              ? list.map((item, index: number) => {
                  return <FreelanceItem item={item} key={index} />;
                })
              : []}
          </div>
        </div>
      </main>
    </>
  );
}

export default Search;
